name: Release from Dev

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    environment: production

    env:
      WEBHOOKS_DIR: "webhooks"
      PROJECT_ID: ${{ vars.PROJECT_ID }}  
      REGION: "us-central1"               

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: Dev

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Update Webhook URLs
        run: |
          echo "🔍 Checking and updating webhook URLs..."
          any_missing=false
          
          for file in $WEBHOOKS_DIR/*.json; do
            filename=$(basename "$file" .json)
            function_name=$(echo "$filename" | tr '[:upper:]' '[:lower:]')
            
            webhook_url="https://${REGION}-${PROJECT_ID}.cloudfunctions.net/${function_name}"
            
            if [ -z "$PROJECT_ID" ]; then
              echo "❌ Missing PROJECT_ID environment variable!"
              any_missing=true
            else
              echo "✅ Updating $filename with URL → $webhook_url"
              jq --arg url "$webhook_url" '.genericWebService.uri = $url' "$file" > tmp.json && mv tmp.json "$file"
            fi
          done
          
          if [ "$any_missing" = true ]; then
            echo "🚫 Missing required environment variables. Exiting."
            exit 1
          fi

      - name: Checkout Release branch
        run: |
          if git show-ref --verify --quiet refs/heads/Release; then
            git checkout Release
          else
            git checkout -b Release
          fi

      - name: Merge Dev into Release
        run: |
          git merge Dev --no-ff -m "Merge Dev into Release with updated webhook URLs"

      - name: Commit and push updated webhooks
        run: |
          git add $WEBHOOKS_DIR/*.json
          git commit -m "Updated webhook URLs for project ${PROJECT_ID}" || echo "No webhook updates"
          git push origin Release

      - name:  Generate and push next version tag
        id: tag
        run: |
          echo "🔢 Generating next tag version..."
          LATEST_TAG=$(git tag --list "GDF-Agent-v*" --sort=-v:refname | head -n1)
          if [ -z "$LATEST_TAG" ]; then
            NEXT_VERSION=1
          else
            NUM=$(echo "$LATEST_TAG" | sed 's/GDF-Agent-v//')
            NEXT_VERSION=$((NUM + 1))
          fi
          VERSION="GDF-Agent-v$NEXT_VERSION"
          echo "🏷 Pushing new version tag: $VERSION"
          git tag "$VERSION"
          git push origin "$VERSION"
          echo "✅ Release branch updated and tag $VERSION pushed successfully!"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
