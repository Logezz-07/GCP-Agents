name: Agent Release

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select environment to release"
        required: true
        default: "Dev"
        type: choice
        options:
          - Dev
          - Prod

jobs:
  release:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    env:
      WEBHOOKS_DIR: "webhooks"
      PROJECT_ID: ${{ vars.PROJECT_ID }}
      REGION: ${{ vars.REGION }}
      ENVIRONMENT: ${{ github.event.inputs.environment }}

    steps:
      # 1️⃣ Checkout Dev branch
      - name: Checkout Dev branch
        uses: actions/checkout@v4
        with:
          ref: Dev
          fetch-depth: 0

      # 2️⃣ Configure Git
      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      # 3️⃣ Update Webhook URLs
      - name: Update Webhook URLs
        run: |
          echo "🔍 Checking and updating webhook URLs..."
          any_missing=false

          for file in $WEBHOOKS_DIR/*.json; do
            filename=$(basename "$file" .json)
            function_name=$(echo "$filename" | tr '[:upper:]' '[:lower:]')

            webhook_url="https://${REGION}-${PROJECT_ID}.cloudfunctions.net/${function_name}"

            if [ -z "$PROJECT_ID" ]; then
              echo "❌ Missing PROJECT_ID environment variable!"
              any_missing=true
            else
              echo "✅ Updating $filename with URL → $webhook_url"
              jq --arg url "$webhook_url" '.genericWebService.uri = $url' "$file" > tmp.json && mv tmp.json "$file"
            fi
          done

          if [ "$any_missing" = true ]; then
            echo "🚫 Missing required environment variables. Exiting."
            exit 1
          fi

      # 4️⃣ Sync Release branch with Dev
      - name: Sync Release branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🚀 Syncing Release branch with Dev..."
          git fetch origin Dev --tags
          git checkout -B release origin/Dev
          git add $WEBHOOKS_DIR/*.json
          git commit -m "Updated webhook URLs for ${ENVIRONMENT} project ${PROJECT_ID}" || echo "No webhook updates"
          git push origin release
          echo "✅ Release branch updated successfully."

      # 5️⃣ Generate and push next version tag
      - name: Generate and push next version tag
        id: tag
        run: |
          echo "🔢 Generating next tag version..."
          LATEST_TAG=$(git tag --list "GDF-Agent-v*" --sort=-v:refname | head -n1)
          if [ -z "$LATEST_TAG" ]; then
            NEXT_VERSION=1
          else
            NUM=$(echo "$LATEST_TAG" | sed 's/GDF-Agent-v//')
            NEXT_VERSION=$((NUM + 1))
          fi
          VERSION="GDF-Agent-v$NEXT_VERSION"
          echo "🏷 Pushing new version tag: $VERSION"
          git tag "$VERSION"
          git push origin "$VERSION"
          echo "✅ Tag $VERSION pushed successfully!"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
