name: Release from Dev

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag version (e.g., v1.0.X)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    environment: production

    env:
      WEBHOOKS_DIR: "webhooks"  # your webhook JSON folder

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: Dev

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Update Webhook URLs
        run: |
          echo "🔍 Checking and updating webhook URLs..."
          any_missing=false
          
          for file in $WEBHOOKS_DIR/*.json; do
            filename=$(basename "$file" .json)
            env_key=$(echo "$filename" | tr '[:lower:]' '[:upper:]' | tr '-' '_' | tr ' ' '_' )
            env_var_value=$(printenv "$env_key" || true)
            
            echo "🔹 File: $filename → ENV: $env_key"

            if [ -z "$env_var_value" ]; then
              echo "❌ Missing production webhook url for $filename"
              any_missing=true
            else
              echo "✅ Found production webhook url for $filename = $env_var_value"
              jq --arg url "$env_var_value" '.genericWebService.url = $url' "$file" > tmp.json && mv tmp.json "$file"
            fi
          done
          
          if [ "$any_missing" = true ]; then
            echo "🚫 One or more environment variables are missing. Exiting."
            exit 1
          fi

      - name: Show updated webhook URLs
        run: |
          echo "🔎 Updated webhook URLs:"
          for file in $WEBHOOKS_DIR/*.json; do
            filename=$(basename "$file" .json)
            url=$(jq -r '.genericWebService.url' "$file")
            echo "→ $filename : $url"
          done

      - name: Checkout or create Release branch
        run: |
          if git show-ref --verify --quiet refs/heads/Release; then
            git checkout Release
          else
            git checkout -b Release
          fi

      - name: Merge Dev into Release
        run: |
          git merge Dev --no-ff -m "Merge Dev into Release with updated webhook URLs"

      - name: Commit and push updated webhooks
        run: |
          git add $WEBHOOKS_DIR/*.json
          git commit -m "Updated webhook URLs from environment variables" || echo "No webhook updates"
          git push origin Release

      - name: Create and push tag
        run: |
          TAG=${{ github.event.inputs.tag }}
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
